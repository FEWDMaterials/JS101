{"home":{"content":"# Javascript 101\n\nHello, Wrold! Welcome to JS101. \n\n## Learning Objectives\n\n* What is JavaScript's place in the technology stack?\n* Essential programming terminology\n* JS Basics\n* Using JS to program UI components \n\n## Game Plan\n\n* #### [Essential Terminology](#essential-terminology)\n* #### [What is JavaScript](#what-is-javascript)\n* #### [Linking JS to Html](#linking-js-to-html)\n* #### [Javascript Basics](#javascript-basics)\n* #### [Functions and Conditionals](#functions-and-conditionals)\n* #### [Arrays and Objects](#arrays-and-objects)\n* #### [Dom Manipulation](#dom-manipulation)\n\n## Additional Resources\n\n* #### [Free Code Camp](https://www.freecodecamp.com/)\nIntense and free code exercises to get better\n\n\n\n","idx":0},"title":{"content":"JS101","idx":1},"desc":{"content":"A brief rundown of javascript and its role in web development","idx":2},"essential-terminology":{"content":"# Essential Terminology\n---\n\n**Learning Objective**: Learn the essential words and concepts that are used on a daily basis by engineers and project/product managers on the job.\n\n---\n\nHere are some words and concepts that will hopefully give you a more holistic view of the more technical aspects of the industry. \n\n#### Define: Program\n---\nDiscrete, highly logical and explicit instructions that are parsed and executed by a computer.\n\nWe call this set of human-readable instructions **source code**, or colloquially, a **computer program**.\n\n**Compilers** can take this source code and transform it into **machine code**, a representation of the source that can be executed by the computer's **central processing unit** or **CPU**. \n\nNot all programs are compiled though, some are **interpreted**. The difference is that compiled languages need a step where the source code is physically transformed into machine code. However, with an interpreted language, this additional step is **excluded** in favor of **parsing** and **executing** the source code directly when the program is run.\n\n#### How programs are written\n---\n\nAll programs are composed with a collection of **fundamental** concepts that, when combined, can essentially dictate a wide variety of tasks a computer can perform.\n\nHere are a collection of these most important concepts:\n\n* **Declarations**: typically, we can store and retrieve data in our programs by associating them with intermediary values that we call **variables**\n* **Expressions**: we use expressions to evaluate stuff. For example, **`2 + 2`** is an example of an expression that will **evaluate** a value, namely 4. \n* **NOTE**: typically we can use expressions and declarations in tandem to perform complex tasks. For instance, we can reference a variable we declared in an expression to help us evaluate new values which can then be stored.\n* **Statements**: statements will use expressions and declarations to alternate a program's **control flow**, which is essentially the order in which declarations, expressions, and other statements are executed.\n\nAside from these fundamental concepts, we also talk a lot about this idea of **algorithms**. An **algorithm** is simple a series of declarations, expressions, and statements that can be used over and over again to solve well defined problems of a certain type.\n\nFor example, we can implement an algorithm that converts temperature from **fahrenheit** to **celsius**. It would look something like this:\n\n1. **Declare** F = 32;\n2. **Expression** ( **F** - 32 ) / 1.8;\n3. **Declare** C = **Evaluated** expression from **[2]**\n\nThis is a form of **pseudo** code where we define the steps a computer program &mdash; **any** &mdash; computer program can take to convert **fahrenheit** to **celsius**.\n\nThe beauty of programming is that all of it revolves around the same key set of concepts and ideas. For this reason, we do not need to specify any **particular programming language** when discussing the functional aspects of a program.\n\n#### Define: Programming languages\n---\n\nA programming language is a series of **grammar** and **rules** that we can define towards writing source code.\n\nLanguages are effectively different approaches towards communicating the same ideas in programming. Essentially, we can communicate in say both **French** and **English**, what mainly differs is the structure of our sentences and the actual words and sounds themselves.\n\nThe **same analogy** can be made with programming languages.\n\n#### Examples of programming languages\n---\n\nThere are many. Way too many. \n\nHere are some of the most popular ones, though.\n\n1. **JavaScript**: this language is interpreted.\n2. **Python**: this language is interpreted.\n3. **Java**: this language is compiled\n4. **Ruby**: this language is interpreted.\n5. **C/C++**: this language is compiled.\n\nThese languages all build on the same concepts defined above; the main difference lies in **how** they are run (compiled vs interpreted) and also **how** they are used. \n\nIn general, anything programmable can be programmed in each of the languages defined above. However, some languages are better suited for certain tasks above others. \n\nFor example, to perform web programming on the front-end, you'll want to write JavaScript. This is because all browsers collectively support running javascript within it's environment. \n\n#### What is web development?\n---\nThe use of programming languages and concepts towards producing a system that listens to user requests over the internet and serves back HTML, CSS, and interaction code to the client.\n\n#### What is the difference between a web site and web app\n---\nWeb sites are more **static**. Think of them as sort of like interactive brochures. They typically don't hold any state and are usually just information.\n\nA web app is more like an iOS or Android app. It holds state, does not refresh itself and in general **does something** vs **showing something**.\n\n#### What are the stages of web development\n---\n\nDepends on the methodology used by team. Typically, there is a UX phase, a Design phase, a Development phase bundled with extensive QA. This was the process used in the consulting firm I used to work in.\n\nFor a startup, the process is similar, however there is a lot more room for iteration and testing out ideas by putting something up for users to use and deliver feedback.\n\n#### What is the difference between front-end and back-end web development\n---\n**Front end**: Client side interactions and structure. This includes stuff like iOS apps and whatever you load in browser.\n\n**Back end**: Server side, data storage and retrival. Needs a client **of some sort** (not necessarily a browser) to work. Deals with storing and retriving information.\n\n#### Main Class Deliverable\n---\n\nIn order to explore the core concepts of this class and achieve our learning objectives, we will recreate the **traditional resume template** for the web.\n\n#### Key Requirements\n---\n\n* Template should resemble the typical resume.pdf we all maintain\n* Template should use tasteful CSS3 styles to accentuate key peices of information and design principles\n* Template should work across all screens including (and specifically) mobile\n* Template should be **printer friendly** and take up exactly one page  when printed. \n\nHere is an **[example](http://resume.taqquikarim.com/)**.\n\n<!--\n**IMPORTANT**: These definitions are **intentionally** super lightweight. Best way to learn programming concepts is by actually programming. You will pick up a vastly larger number of concepts and vocabulary when we start building websites from scratch. For this reason, I tried to keep this portion of the class as minimal as possible.\n\n#### What can you build with various languages?\n---\nBasically, anything. You can use programming languages to configure hardware, build websites, build mobile apps, desktop programs, server monitoring systems. Literally, anything.\n\n#### What is web development?\n---\nThe use of programming languages and concepts towards producing a system that listens to user requests over the internet and serves back HTML, CSS, and interaction code to the client.\n\n#### What is the difference between a web site and web app\n---\nWeb sites are more **static**. Think of them as sort of like interactive brochures. They typically don't hold any state and are usually just information.\n\nA web app is more like an iOS or Android app. It holds state, does not refresh itself and in general **does something** vs **showing something**.\n\n#### What are the stages of web development\n---\n\nDepends on the methodology used by team. Typically, there is a UX phase, a Design phase, a Development phase bundled with extensive QA. This was the process used in the consulting firm I used to work in.\n\nFor a startup, the process is similar, however there is a lot more room for iteration and testing out ideas by putting something up for users to use and deliver feedback.\n\n#### What is the difference between front-end and back-end web development\n---\n**Front end**: Client side interactions and structure. This includes stuff like iOS apps and whatever you load in browser.\n\n**Back end**: Server side, data storage and retrival. Needs a client **of some sort** (not necessarily a browser) to work. Deals with storing and retriving information.\n\n#### What are some common programming concepts?\n---\n\n* Algorithms\n* Variables\n* Loops\n* Design patterns\n\n\n-->\n","idx":3},"what-is-javascript":{"content":"# What is JavaScript\n---\n\nLet's begin by defining what javascript actually is.\n\n### [JS Global Notes](http://samantha.fewd.us/#fork/mottaquikarim/JS101) | [LIVE Instructor View](http://samantha.fewd.us/#broadcast/mottaquikarim/JS101)\n\n#### Learning Objectives\n---\n1. What can we do with javascript code?\n\n#### What is JavaScript\n---\nOriginally called **Mocha**, then **LiveScript**, then renamed to **JavaScript**.\n\n2. It's a subclass of ECMAScript, a standardization maintained by Ecma International\n3. Basically, Ecma is the **Webster's Dictionary** of JavaScript\n\n### What can you do with Javascript?\n\nJavaScript runs in the <strong>browser</strong>, meaning it is used heavily in user-interaction.\nIn other words, with javascript, you can...\n\n#### Animate stuff\n---\nYou can use javascript to create for example an infinite random prop loop.\n\n<iframe scrolling='no' src='//codepen.io/mottaquikarim/embed/jgIbd/?height=268&theme-id=820&default-tab=result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='min-height: 268px !important;'>See the Pen <a href='http://codepen.io/mottaquikarim/pen/jgIbd/'>jQuery Random Height/Width</a> by Mottaqui Karim (<a href='http://codepen.io/mottaquikarim'>@mottaquikarim</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>\n\n#### Allow the user to control stuff\n---\nYou can allow the user to take control of a UI element and dictate its state.\n\n<iframe height=\"300\" src=\"//jsfiddle.net/2jwnjwfd/1/embedded/result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n#### Mess with people's minds\n---\nThis is just a pretty cool masking example that is actually pretty hard to pull off with web dev tech (but can be done, as shown here thanks to javascript).\n\n(**FYI**: this formed the basis of [this website](http://maveron.com/) that I built back in the day).\n\n<iframe scrolling='no' src='//codepen.io/mottaquikarim/embed/DABIG/?height=268&theme-id=820&default-tab=result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='min-height: 268px !important;'>See the Pen <a href='http://codepen.io/mottaquikarim/pen/DABIG/'>Mask Effect demo</a> by Mottaqui Karim (<a href='http://codepen.io/mottaquikarim'>@mottaquikarim</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>\n\n#### Determine the state of something on a page in real time\n---\nWe are using something called conditionals here.\n\n<iframe width=\"100%\" height=\"500\" style=\"height: 400px;\" src=\"//jsfiddle.net/hrfq4qrj/1/embedded/result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n#### Load in data dynamically (this is the best one)\n---\nBasically, we can interact with API data without ever reloading the page!","idx":4},"linking-js-to-html":{"content":"# Linking JS To HTML\n---\n\n","idx":5},"javascript-basics":{"content":"","idx":6},"functions-and-conditionals":{"content":"","idx":7},"arrays-and-objects":{"content":"","idx":8},"dom-manipulation":{"content":"","idx":9},"__list__":["home","title","desc","essential-terminology","what-is-javascript","linking-js-to-html","javascript-basics","functions-and-conditionals","arrays-and-objects","dom-manipulation"]}